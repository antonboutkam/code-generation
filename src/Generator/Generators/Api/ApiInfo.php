<?php

namespace Generator\Generators\Api;

use Api\Info\IApiInfo;
use Cli\Tools\CommandUtils;
use Helper\ApiXsd\Schema\Api;
use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\PhpNamespace;

/**
 * Generates the ApiInfo.php file which can be found in each Api module.
 * Class ApiInfo
 * @package Generator\Api\modules
 */
final class ApiInfo
{
    final public function fromXml(Api $oApi)
    {
        echo "Generating class " . $oApi->getApiNamespace() . '\\Generated\\ApiInfo' . PHP_EOL;

        $oNamespace = new PhpNamespace($oApi->getApiNamespace() . '\\Generated');
        $oClass = new ClassType("ApiInfo");
        $oClass->addImplement(IApiInfo::class);

        $sComment = [
            'This class is automatically generated by the build script.',
            'Do not change it as your changes will be lost after the next build',
            'If you need modifications please extend'
        ];

        $oClass->setComment(join(PHP_EOL, $sComment));

        $aEmail = $oApi->getContacts('TECHNICAL');

        $aMethodMap = [
            "getTitle" => ["return" => $oApi->getTitle()],
            "getDescription" => ["return" => $oApi->getDescription()],
            "getOrganisation" => ["return" => $oApi->getOrganisation()],
            "getApiDir" => ["return" => $oApi->getApi_dir()],
            "getEmail" => ["return" => $aEmail[0]['email']],
            "getServers" => ["return" => $oApi->getServers()],
            "getContacts" => ["return" => $oApi->getContactArray()],
            "getEndpointUrl" => ["return" => $oApi->getEndpoint_url()],
            "getDocumentationUrl" => ["return" => $oApi->getDocumentation_url()],
            "getAuthorisationModel" => ["return" => $oApi->getAuthorization_model()],
            "getCaCert" => ["return" => $oApi->getCa_cert_path()],
        ];

        $aMethods = [];
        foreach ($aMethodMap as $sMethodName => $aImplementation) {
            $aMethods[$sMethodName] = $oClass->addMethod($sMethodName);

            $aMethods[$sMethodName]->setFinal(true);
            $aMethods[$sMethodName]->setVisibility('public');

            if (is_array($aImplementation['return'])) {
                $aMethods[$sMethodName]->setReturnType('array');

                $aBody = ['$aReturn = [];'];

                foreach ($aImplementation['return'] as $iRow => $aProperties) {
                    if (is_array($aProperties)) {
                        foreach ($aProperties as $sKey => $sValue) {
                            $aBody[] = '$aReturn[' . $iRow . ']["' . $sKey . '"] = "' . $sValue . '";';
                        }
                    } else {
                        $aBody[] = '$aReturn[' . $iRow . '] = "' . $aProperties . '";';
                    }
                }
                $aBody[] = "return \$aReturn;";

                $aMethods[$sMethodName]->setBody(join(PHP_EOL, $aBody));
            } else {
                $aMethods[$sMethodName]->setReturnType('string');
                $aMethods[$sMethodName]->setBody('return "' . $aImplementation['return'] . '";');
            }
        }

        $oClass->setFinal(true);



        /*
        $oApi->getTitle();

        <?php
            namespace Api\Info;

            interface IApiInfo
            {
                public function getTitle():string;
                public function getDescription():string;
                public function getOrganisation():string;
                public function getApiDir():string;
                public function getEmail():string;
                public function getServers():array;
                public function getContacts():array;
                public function getEndpointUrl():string;
                public function getDocumentationUrl():string;
                public function getAuthorisationModel():string;
                public function getCaCert():string;
            }
        */
        $oNamespace->add($oClass);

        $sTemplate = (string) $oNamespace;
        $sFileLocation = CommandUtils::getRoot() . "/public_html/" .  $oApi->getApi_dir() . "/modules/Generated/ApiInfo.php";

        if (!is_dir(dirname($sFileLocation))) {
            echo "Crate dir $sFileLocation" . PHP_EOL;
            mkdir(dirname($sFileLocation));
        }

        echo "Write file: " . $sFileLocation . PHP_EOL;
        file_put_contents($sFileLocation, '<?php/*** @unfixed**/' . PHP_EOL . $sTemplate);
    }
}
